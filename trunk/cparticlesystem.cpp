// Class automatically generated by Dev-C++ New Class wizard

#include "cparticlesystem.h" // class's header file

// class constructor
CParticleSystem::CParticleSystem()
{
	// insert your code here
	ACTIVE = false;
	RANDOMCOLOUR = false;
	
}

// class destructor
CParticleSystem::~CParticleSystem()
{
	// insert your code here
}



void CParticleSystem::Activate(float xpos, float ypos, float zpos, int numparticles, int mintimetolive, int maxtimetolive){


    srand(time(NULL));                              

    x = xpos;
    y = ypos;
    z = zpos;
    
    ParticleCount = numparticles;
    
    TTL = maxtimetolive;
    
    Particles = new PARTICLE[ParticleCount];
                              
    for (int p = 0; p < ParticleCount; p++){
        
        Particles[p].x = 0.0f;    
        Particles[p].y = 0.0f;    
        Particles[p].z = 0.0f;    
        
        Particles[p].sx = RandomFloat(minparticlespeed, maxparticlespeed, 100);    
        Particles[p].sy = RandomFloat(minparticlespeed, maxparticlespeed, 100);    
        Particles[p].sz = RandomFloat(minparticlespeed, maxparticlespeed, 100);    
        
        Particles[p].tsx = settsx;    
        Particles[p].tsy = settsy;    
        Particles[p].tsz = settsz;   
        
        Particles[p].size = setsize; 
        
        Particles[p].TTL = RandomInt(mintimetolive, maxtimetolive);
        
        Particles[p].R = RED;
        Particles[p].G = GREEN;
        Particles[p].B = BLUE;
        
        if (RANDOMCOLOUR) {

            Particles[p].R = RandomFloat(0.0f, 1.0f, 100);
            Particles[p].G = RandomFloat(0.0f, 1.0f, 100);
            Particles[p].B = RandomFloat(0.0f, 1.0f, 100);
                          
        }
    }
    
    ACTIVE = true;
                        
}


void CParticleSystem::Adjust(){


    for (int p = 0; p < ParticleCount; p++){
        
      if(Particles[p].TTL > 0){   

        Particles[p].x += Particles[p].sx;    
        Particles[p].y += Particles[p].sy;    
        Particles[p].z += Particles[p].sz;    
                
        Particles[p].sx += (Particles[p].tsx - Particles[p].sx) / 20;    
        Particles[p].sy += (Particles[p].tsy - Particles[p].sy) / 20;    
        Particles[p].sz += (Particles[p].tsz - Particles[p].sz) / 20;    
                
        Particles[p].TTL -= 1;

      }
        
    }
    
    TTL -= 1;
    
    if (TTL <= 0) {ACTIVE=false;}

}


void CParticleSystem::Render(){

     float sz;

     glPushMatrix();
                          
     glTranslatef(x, y, z);
     glEnable(GL_TEXTURE_2D);
     glDisable(GL_DEPTH_TEST);
     glEnable(GL_BLEND);
     glBlendFunc(GL_SRC_COLOR,GL_ONE);
     glBindTexture(GL_TEXTURE_2D, texture);
     
     
                          
    for (int p = 0; p < ParticleCount; p++){
        
      if(Particles[p].TTL > 0){  
        
        glPushMatrix();
        
        glTranslatef(Particles[p].x, Particles[p].y, Particles[p].z);    
        
             sz = Particles[p].size / 2.0f;
        
             glColor4f(Particles[p].R, Particles[p].G, Particles[p].B, 1.0f);
        
             glBegin(GL_QUADS);
             
               glVertex3f(-sz, -sz, 0.0f); glTexCoord2f(0.0f, 0.0f);
               glVertex3f( sz, -sz, 0.0f); glTexCoord2f(1.0f, 0.0f);
               glVertex3f( sz,  sz, 0.0f); glTexCoord2f(1.0f, 1.0f);
               glVertex3f(-sz,  sz, 0.0f); glTexCoord2f(0.0f, 1.0f);
             
             glEnd();
          
        glPopMatrix(); 
        
      } 
            
    }
                          
    
    glPopMatrix(); 
    
    Adjust();
                       
}


float CParticleSystem::RandomFloat(float min, float max, int step){
    
    float retval;
    
    retval = 0;
      
    retval = ( ((max - min) / step) * (float)(rand() % (step + 1)) ) + min;
      
    return retval; 
}	
	
int CParticleSystem::RandomInt(int min, int max){
    
    int retval;
    
    retval = 0;
      
    retval = (rand() % (max - min)) + min;
      
    return retval; 
}		
